<?php

/**
 * Walks User API
 * .
 *
 * OpenAPI spec version: 1.0.0
 * Contact: admins@walks.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

// use Illuminate\Support\Facades\Request;
use Illuminate\Http\Request;
use Validator;
use Log;
use Carbon\Carbon;

use App\Models\Client;
use App\Models\ClientDestination;
use App\Models\ClientSocialProvider;
use App\Models\Booking;
use App\Models\ClientTraveler;
use App\Models\ClientWishList;
use App\Models\Events;
use App\Models\ApiUser;

use Walks\WapiConnect\WapiConnectController; 
use Walks\WapiConnect\WapiCommand; 

use Walks\Adestra\AdestraContact;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;

// use GuzzleHttp\Client;

class UserApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {

        DB::connection()->enableQueryLog();
    }


    /**
     * Operation getDocsSwagger
     *
     * 
     *
     *
     * @return Http response
     */
    public function getDocsSwagger(Request $request)
    {
     Log::info('##################### getDocsSwagger #####################');


        $json = WapiConnectController::getApiDocs();

        return response($json);

    }

    public function getDocsHTML(Request $request)
    {
     Log::info('##################### getDocsHTML #####################');


        $json = WapiConnectController::getApiHTML();

        return response($json);

    }

    public function getPostman(Request $request)
    {
     Log::info('##################### getPostman #####################');


        $json = WapiConnectController::getPostman();

        return response($json);

    }

    /**
     * Operation addUser
     *
     * Add a new API user.
     *
     *
     * @return Http response
     */
    public function addApiUser(Request $request)
    {   
        Log::info('##################### addApiUser #####################');
        //$input = Request::all();
        $data = array();

        //path params validation
        // https://lumen.laravel.com/docs/5.4/validation

        $validator = Validator::make($request->all(), [
            'name' => 'required',
            'email' => 'required|email|unique:api_users',
            'password' => 'required|min:6|max:20'
        ]);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors(),
            'message' => 'Validation error'
            ];

            return response($response);
        } 

        $apiUser = new ApiUser;

        if ($request->has('name')) { $apiUser->name = $request->name; };
        if ($request->has('email')) { $apiUser->email = $request->email; };
        $apiUser->password = app('hash')->make($request->password);

    
        $apiUser->save();


        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'user' => $apiUser ],
        'message' => ''
        ];

        // select * from clients order by id desc limit 1;

        return response($response);


    }



    /**
     * Operation addUser
     *
     * Add a new user.
     *
     *
     * @return Http response
     */
    public function addUser(Request $request)
    {   
        Log::info('##################### addUser #####################');
        //$input = Request::all();
        $data = array();
        $message = '';

        // path params validation
        // https://lumen.laravel.com/docs/5.4/validation
        // https://laravel.com/docs/5.4/validation

        $validatorMessages =  [
            'username.required' => 'A username is required',
            'fname.required' => 'A first name is required',
            'lname.required'  => 'A last name is required',
            'email.required'  => 'An email is required',
        ];

        $validator = Validator::make($request->all(), [
            'email' => 'required|email'
        ], $validatorMessages);



        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors(),
            'message' => 'Validation error'
            ];

            return response($response);
        } 


        // does this client exist using this email

        $client  = Client::where('email', $request->email)->first();

        if (is_null($client)) {
            Log::info('client not found by email, creating : '.print_r($request->email, true));

            // create the client
            $client = new Client;
            
            if ($request->has('password')) {
                $client->password = app('hash')->make($request->password);
            };
        
        if ($request->has('user_name')) { $client->user_name = $request->username; };
        if ($request->has('fname')) { $client->fname = $request->fname; };
        if ($request->has('fname')) { $client->lname = $request->lname; };
        if ($request->has('email')) { $client->email = $request->email; };
        if ($request->has('address')) { $client->address = $request->address; };
        if ($request->has('city')) { $client->city = $request->city; };
        if ($request->has('zip')) { $client->zip = $request->zip; };
        if ($request->has('countries_id')) { $client->countries_id = $request->countries_id; };
        if ($request->has('home_number')) { $client->home_number = $request->home_number; };
        if ($request->has('mobile_number')) { $client->mobile_number = $request->mobile_number; };
        if ($request->has('title')) { $client->title = $request->title; };
        if ($request->has('account_status')) { $client->account_status = $request->account_status; };
        if ($request->has('learned_about_walks')) { $client->learned_about_walks = $request->learned_about_walks; };
        if ($request->has('is_subscribed')) { $client->is_subscribed = $request->is_subscribed; };
        if ($request->has('last_time_logged_in')) { $client->last_time_logged_in = $request->last_time_logged_in; };
        if ($request->has('last_ip_address_used')) { $client->last_ip_address_used = $request->last_ip_address_used; };
        if ($request->has('last_purchase_date')) { $client->last_purchase_date = $request->last_purchase_date; };

        $client->save();
        $message = 'created';

        } else {
            Log::info('client found by email : '.print_r($request->email, true));

             $message = 'recovered';

            if ($request->password != '') {
                Log::info(' password sent '.$request->password);
                
            // if the recovered account password does not match then send an error
            if (app('hash')->check($request->password, $client->password)) {
                Log::info('Client password matched: ');

               

            } else {
                Log::info('Client password NOT matched: ');

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => [ 'email' => array('Account in use')],
            'message' => 'Account in use'
            ];

             return response($response);

            } // end else
        } // end they sent a pass

          
           
            
        } // end client found by email


        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'user' => $client ],
        'message' => $message
        ];

        // select * from clients order by id desc limit 1;

        return response($response);


    }

    /**
     * Operation loginUser
     *
     * Logs user into the system.
     *
     *
     * @return Http response
     */
    public function loginUser(Request $request)
    {
        Log::info('##################### loginUser #####################');

        $data = array();


        $messages =  [
            'fname.required' => 'A first name is required',
            'lname.required'  => 'A last name is required',
        ];

        //path params validation
        $validator = Validator::make($request->all(), [
            'email' => 'required|email',
            'password' => 'required|min:6|max:12'
        ]);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors(),
            'message' => 'Validation error'
            ];

            return response($response);
        } 

        // validate the user
        $client = \App\Models\Client::where('email', $request->email)->first();

        if (is_null($client)) {
            Log::info('client not found by email: '.print_r($request->email, true));

        $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $data,
            'message' => 'Client not found by email'
            ];

        return response($response);

        }

        $passwordHashed = app('hash')->make($request->password);

            if (app('hash')->check($request->password, $client->password)) {
                Log::info('Client password matched: ');

                // set the last_time_logged_in
                $client->last_time_logged_in = new \DateTime();
                $client->save();


                $response = [
                'code' => 200,
                'status' => 'success',
                'data' => [ 'user' => $client ],
                'message' => ''
                ];

                return response($response);

            } else {

                Log::info('Client password NOT matched: ');


                $response = [
                'code' => 405,
                'status' => 'failure',
                'data' => $data,
                'message' => ''
                ];

                return response($response);
            }

        }

/**
     * Operation loginSocialMedia
     *
     * Logs user into the system.
     *
     *
     * @return Http response
     */
    public function loginSocialMedia(Request $request)
    {
        Log::info('##################### loginSocialMedia #####################');

        $data = array();

        $validatorMessages =  [
            'provider.required' => 'A social media provider is required',
            'socialUserId.required'  => 'A socialUserId is required',
        ];

        $validator = Validator::make($request->all(), [
            'provider' => 'required',
            'socialUserId' => 'required'
        ], $validatorMessages);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 


        // recover the user from the ClientSocialProvider record
        // https://laravel.com/docs/5.4/queries#where-clauses

        $clientSocialProvider = \App\Models\ClientSocialProvider::where(
            [
                ['provider', '=', $request->provider],
                ['socialUserId', '=', $request->socialUserId],
            ])->first();



         if (is_null($clientSocialProvider)) {
            Log::info('ClientSocialProvider not found by provider and socialUserId');

            $response = [
                'code' => 400,
                'status' => 'failure',
                'data' => 'ClientSocialProvider not found by provider and socialUserId'
                ];

            return response($response);

        } else {

             Log::info('ClientSocialProvider recovered with client_id: '.$clientSocialProvider->client_id);

            $client = \App\Models\Client::find($clientSocialProvider->client_id);

             if (is_null($client)) {
                Log::info('Client not found by userId '.print_r($userId, true));

                $response = [
                    'code' => 400,
                    'status' => 'failure',
                    'data' => 'Client not found by userId'
                ];

            return response($response);

            } // end if (is_null($client)) 

            // set the last_time_logged_in
            $client->last_time_logged_in = new \DateTime();
            $client->save();


            $response = [
            'code' => 200,
            'status' => 'success',
            'data' => [ 'user' => $client ],
            'message' => ''
            ];

            return response($response);




        } // end else is_null($clientSocialProvider)





        }

/**
     * Operation userPasswordChange
     *
     * Change the users password.
     *
     * @param string $passwordCurrent, $passwordNew, $passwordNewVerify.
     *
     * @return Http response
     */
    public function userPasswordChange(Request $request, $userId)
    {
        Log::info('##################### userPasswordChange #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'

            ];

            return response($response);
        } 

        $validatorMessages =  [
            'email.required' => 'A valid email is required',
            'passwordCurrent.required' => 'A valid current password is required',
            'passwordNew.required'  => 'A valid new password is required',
            'passwordNew.min'  => 'The new password should be longer than 6 characters',
            'passwordNew.max'  => 'The new password should be shorter than 20 characters',
            'passwordNewVerify.required'  => 'A valid new password verify is required',
            'passwordNewVerify.min'  => 'The new password verify should be longer than 6 characters',
            'passwordNewVerify.max'  => 'The new password verify should be shorter than 20 characters'
        ];

        //path params validation
          $validator = Validator::make($request->all(), [
            'passwordCurrent' => 'required|min:6|max:20',
            'passwordNew' => 'required|min:6|max:20',
            'passwordNewVerify' => 'required|min:6|max:20'
        ], $validatorMessages);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors(),
            'message' => $validator->errors()->first()
            ];

            return response($response);
        } 

        if ($request->passwordNew != $request->passwordNewVerify) {
            
            Log::info('request : passwordNew does not equal passwordNewVerify');

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Passwords do not match'
            ];

            return response($response);
        } 

        // validate the user
        $client = \App\Models\Client::find($userId);

        if (is_null($client)) {
            Log::info('client not found by userId: '.print_r($userId, true));

        $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Client not found by userId'
            ];

        return response($response);

        } // end is_null($client)

            if (app('hash')->check($request->passwordCurrent, $client->password)) {
                Log::info('Client password matched: saving passwordNew');
                
                $client->password = app('hash')->make($request->passwordNew);

                $client->save();

                $response = [
                'code' => 200,
                'status' => 'success',
                'data' => '',
                'message' => 'Password updated'
                ];

                return response($response);

            } else {

                Log::info('Client password NOT matched');

                $response = [
                'code' => 405,
                'status' => 'failure',
                'data' => '',
                'message' => 'Client password NOT matched'
                ];

                return response($response);
            }

        }


/**
     * Operation userPasswordResetKey
     *
     * Recover user from key
     *
     * @param string $passwordCurrent, $passwordNew, $passwordNewVerify.
     *
     * @return Http response
     */
    public function userPasswordResetKey(Request $request)
    {
        Log::info('##################### userPasswordResetKey #####################');


        // UPDATE `clients` SET `reset_hash` = 'AABMQaVRpqat6oQteLvvaQBUxh5ih3_xW1nh0Xn41C' WHERE `clients`.`id` = 145803;



        $data = array();

        

        $validatorMessages =  [
            'resetKey.required' => 'A valid password key is required',
        ];

        //path params validation
          $validator = Validator::make($request->all(), [
            'resetKey' => 'required|min:6|max:128'
        ], $validatorMessages);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors(),
            'message' => $validator->errors()->first()
            ];

            return response($response);
        } 


        // validate the user
        Log::info('would now find user out by reset_hash: '.print_r($request->resetKey, true));


        $client = \App\Models\Client::where('reset_hash', $request->resetKey)->first();


        if (is_null($client)) {
            Log::info('client not found by reset_hash: ');

        $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Client not found by reset_hash'
            ];

        return response($response);

        } // end is_null($client)

        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'user' => $client ],
        'message' => ''
        ];


        return response($response);

        }



    /**
     * Operation logoutUser
     *
     * Logs out current logged in user session.
     *
     *
     * @return Http response
     */
    public function logoutUser(Request $request)
    {
        Log::info('##################### logoutUser #####################');

        $data = array();


        $messages =  [
            'email.required'  => 'A email address is required',
        ];

        //path params validation
        $validator = Validator::make($request->all(), [
            'email' => 'required|email'
        ]);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

        Log::info('would now log user out by email: '.print_r($request->email, true));

        //path params validation
            $response = [
            'code' => 200,
            'status' => 'success',
            'data' => $data,
            'message' => ''
            ];


        return response($response);
    }


    /**
     * Operation passwordEmail
     *
     * Sends password reset email.
     *
     *
     * @return Http response
     */
    public function passwordEmail(Request $request)
    {
     Log::info('##################### passwordEmail #####################');

        $data = array();

        $messages =  [
            'email.required'  => 'A email address is required',
        ];

        //path params validation
        $validator = Validator::make($request->all(), [
            'email' => 'required|email'
        ]);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors(),
            'message' => ''
            ];

            return response($response);
        } 

        // validate the user
        $client = \App\Models\Client::where('email', $request->email)->first();

        if (is_null($client)) {
            Log::info('client not found by email: '.print_r($request->email, true));

        $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => [ 'email' => array('Client not found by email')],
            'message' => 'Client not found by email'
            ];

        return response($response);

        }

        Log::info('would now send password reset email: '.print_r($request->email, true));

        /*
{
  "client_email":"kevin@walks.org",
  "client_name":"Kevin Ravnsborg",
  "hash":"1b136842753b2282d8b7ed66ab0f52df"
}

*/

    $newResetHash = base64_encode(Hash::make(str_random(24)));

    Log::info('newResetHash: '.print_r($newResetHash, true));

    $client->reset_hash = $newResetHash;

    $client->save();

        $data = array(
                "client_name" => $client->fname." ".$client->lname,
                "client_email" => $client->email,
                "hash" => $client->reset_hash
        );


        Log::info('data : '.print_r($data, true));
        
        $command = new WapiCommand('mailer', 'clientPasswordReset', $data );

        Log::info('command : '.print_r($command, true));

        $wapiResponse = WapiConnectController::apiRequest($command);
        

        if ($wapiResponse['wapiStatus']['code'] != 200) {

            return response($wapiResponse['wapiStatus']);

        } 




            $response = [
            'code' => 200,
            'status' => 'success',
            'data' => '',
            'message' => 'Email sent'
            ];


        return response($response);

    }



    /**
     * Operation deleteUser
     *
     * Deletes a user.
     *
     * @param int $user_id User id to delete (required)
     *
     * @return Http response
     */
    public function deleteUser(Request $request, $userId)
    {
     Log::info('##################### deleteUser #####################');

        $data = array();


        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'

            ];

            return response($response);
        } 

        
        Log::info('would now delete the userId: '.print_r($userId, true));


        $client = \App\Models\Client::find($userId);

         if (is_null($client)) {
            Log::info('Client not found by userId '.print_r($userId, true));

        $response = [
            'code' => 400,
            'status' => 'failure',
            'data' => 'Client not found by userId'
            ];

        return response($response);

        }

        Log::info('would now delete the client: '.print_r($client, true));

        $client->delete();

            $response = [
            'code' => 200,
            'status' => 'success',
            'data' => '',
            'message' => 'User deleted'

            ];


        return response($response);

    }

    /**
     * Operation getUserById
     *
     * Find user by userId.
     *
     * @param int $user_id userId of user to return (required)
     *
     * @return Http response
     */
    public function getUserById(Request $request, $userId)
    {
    Log::info('##################### getUserById #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        $client  = Client::find($userId);

        if (is_null($client)) {
            Log::info('Client not found by userId '.print_r($userId, true));

        $response = [
            'code' => 400,
            'status' => 'failure',
            'data' => 'Client not found by userId'
            ];

        return response($response);

        }

        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'user' => $client ],
        'message' => ''
        ];

        // select * from clients order by id desc limit 1;

        return response($response);


    }
    /**
     * Operation updateUser
     *
     * Updates a user.
     *
     * @param int $user_id userId object that needs to be updated (required)
     *
     * @return Http response
     */
    public function updateUser(Request $request, $userId)
    {
    Log::info('##################### updateUser #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        $client  = Client::find($userId);

        if (is_null($client)) {
            Log::info('Client not found by userId '.print_r($userId, true));

        $response = [
            'code' => 400,
            'status' => 'failure',
            'data' => 'Client not found by userId'
            ];

        return response($response);

        }
        

            
        if ($request->has('fname')) { $client->fname = $request->fname; };
        if ($request->has('lname')) { $client->lname = $request->lname; };
        if ($request->has('email')) { $client->email = $request->email; };
        if ($request->has('address')) { $client->address = $request->address; };
        if ($request->has('city')) { $client->city = $request->city; };
        if ($request->has('zip')) { $client->zip = $request->zip; };
        if ($request->has('countries_id')) { $client->countries_id = $request->countries_id; };
        if ($request->has('home_number')) { $client->home_number = $request->home_number; };
        if ($request->has('mobile_number')) { $client->mobile_number = $request->mobile_number; };
        if ($request->has('title')) { $client->title = $request->title; };

        if ($request->has('password')) { 
            $client->password = app('hash')->make($request->password);
        };

        if ($request->has('account_status')) { $client->account_status = $request->account_status; };
        if ($request->has('learned_about_walks')) { $client->learned_about_walks = $request->learned_about_walks; };
        if ($request->has('is_subscribed')) { $client->is_subscribed = $request->is_subscribed; };
        if ($request->has('last_ip_address_used')) { $client->last_ip_address_used = $request->last_ip_address_used; };
        if ($request->has('last_purchase_date')) { $client->last_purchase_date = $request->last_purchase_date; };
        if ($request->has('reset_hash')) { $client->reset_hash = $request->reset_hash; };

        $client->save();


        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'user' => $client ],
        'message' => ''
        ];

        // select * from clients order by id desc limit 1;

        return response($response);

    }

    /**
     * Operation addUserDestination
     *
     * Add to users destination list.
     *
     * @param int $user_id ID of user to append destination  (required)
     *
     * @return Http response
     */
    public function addUserDestination(Request $request, $userId)
    {
      Log::info('##################### addUserDestination #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        $messages =  [
            'city.required'  => 'A destination city is required',
        ];

        $validator = Validator::make($request->all(), [
            'city' => 'required',
         //   'hotelPhone' => 'required|nullable',
         //   'hotelEmail' => 'required|email|nullable',
            'startDate' => 'required',
            'endDate' => 'required'
        ]);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

        // add the record
        $clientDestination = new ClientDestination;
        
        $clientDestination->client_id = $userId;
        if ($request->has('city')) { $clientDestination->city = $request->city; };
        if ($request->has('hotelName')) { $clientDestination->hotelPhone = $request->hotelName; };
        if ($request->has('hotelPhone')) { $clientDestination->hotelPhone = $request->hotelPhone; };
        if ($request->has('hotelEmail')) { $clientDestination->hotelEmail = $request->hotelEmail; };
        if ($request->has('startDate')) { $clientDestination->startDate = $request->startDate; };
        if ($request->has('endDate')) { $clientDestination->endDate = $request->endDate; };

        $clientDestination->save();

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'destination' => $clientDestination ]
        ];

        // final return
        return response($response);

    }

    /**
     * Operation deleteUserDestination
     *
     * Deletes a social provider.
     *
     * @param int $user_id User id to manipulate (required)
     *
     * @return Http response
     */
    public function deleteUserDestination(Request $request, $userId)
    {
    Log::info('##################### deleteUserDestination #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        $messages =  [
            'city.required'  => 'A destination city id is required',
        ];

        $validator = Validator::make($request->all(), [
            'destinationId' => 'required'
        ]);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

        Log::info('would now deleteUserDestination by userId: '.print_r($userId, true));

        Log::info('would now deleteUserDestination by destinationId: '.print_r($request->destinationId, true));

        $clientDestination = \App\Models\ClientDestination::find($request->destinationId);

         if (is_null($clientDestination)) {
            Log::info('ClientDestination not found by request->destinationId '.print_r($request->destinationId, true));

        $response = [
            'code' => 400,
            'status' => 'failure',
            'data' => 'ClientDestination not found by destinationId'
            ];

        return response($response);

        }

        // Log::info('would now delete the client: '.print_r($clientDestination, true));

        $clientDestination->delete();

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => 'Destination deleted'
        ];

        // final return
        return response($response);
    }

    /**
     * Operation userDestination
     *
     * Get user destination list.
     *
     * @param int $user_id ID of user to fetch (required)
     *
     * @return Http response
     */
    public function userDestination(Request $request, $userId)
    {
    Log::info('##################### userDestination #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        }   

        // get the records
        $destinations = \App\Models\ClientDestination::where('client_id', $userId)->orderBy('startDate')->get();


        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'destinations' => $destinations ]
        ];

        // final return
        return response($response);
    }



    /**
     * Operation addUserSocialProvider
     *
     * Add to users SocialGraph provider list.
     *
     * @param int $user_id ID of user to append SocialGraph Provider (required)
     *
     * @return Http response
     */
    public function addUserSocialProvider(Request $request, $userId)
    {
    Log::info('##################### addUserSocialProvider #####################');

        $data = array();

         if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        $validatorMessages =  [
            'socialUserId.required'  => 'A socialUserId is required',
        ];

        $validator = Validator::make($request->all(), [
            'provider' => 'required',
            'socialUserId' => 'required'
        ], $validatorMessages);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

        // add the record
        $clientSocialProvider = new ClientSocialProvider;
        
        $clientSocialProvider->client_id = $userId;
        if ($request->has('provider')) { $clientSocialProvider->provider = $request->provider; };
        if ($request->has('socialUserId')) { $clientSocialProvider->socialUserId = $request->socialUserId; };
        if ($request->has('metadata')) { $clientSocialProvider->metadata = $request->metadata; };

        $clientSocialProvider->save();

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'socialProvider' => $clientSocialProvider ]
        ];

        // final return
        return response($response);

    }

    /**
     * Operation deleteUserSocialProvider
     *
     * Deletes a social provider.
     *
     * @param int $user_id User id to manipulate (required)
     *
     * @return Http response
     */
    public function deleteUserSocialProvider(Request $request, $userId)
    {
     Log::info('##################### deleteUserSocialProvider #####################');

    $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        $validatorMessages =  [
            'socialProviderId.required'  => 'A socialProviderId is required',
        ];

        $validator = Validator::make($request->all(), [
            'socialProviderId' => 'required'
        ], $validatorMessages);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

        Log::info('would now deleteUserSocialProvider by userId: '.print_r($userId, true));

        Log::info('and by socialProviderId: '.print_r($request->socialProviderId, true));

        $clientSocialProvider = \App\Models\ClientSocialProvider::find($request->socialProviderId);

         if (is_null($clientSocialProvider)) {
            Log::info('ClientSocialProvider not found by request->socialProviderId '.print_r($request->socialProviderId, true));

        $response = [
            'code' => 400,
            'status' => 'failure',
            'data' => 'ClientSocialProvider not found by socialProviderId'
            ];

        return response($response);

        } 


        $clientSocialProvider->delete();

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => 'Social provider deleted'
        ];

        // final return
        return response($response);
    }

    /**
     * Operation userSocial
     *
     * Get user social graph.
     *
     * @param int $user_id ID of user to fetch (required)
     *
     * @return Http response
     */
    public function userSocial(Request $request, $userId)
    {
    Log::info('##################### userSocial #####################');

    $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        }   

        // get the records
        $socialProviders = \App\Models\ClientSocialProvider::where('client_id', $userId)->get();


        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'socialProviders' => $socialProviders ]
        ];

        // final return
        return response($response);
    }

    /**
     * Operation userTourlist
     *
     * Get list past and future tours.
     *
     * @param int $user_id ID of user to fetch (required)
     *
     * @return Http response
     */
    public function userTourlist(Request $request, $userId)
    {
     Log::info('##################### userTourlist #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        // get the records
        // https://laravel.com/docs/5.4/queries

        $tours = DB::table('bookings')->select('bookings.*','bookings_details.*','bookings_details.id as bookings_details_id','bookings_details_transactions.*','events_stages.*','events.*')->join('bookings_details', 'bookings.id', '=', 'bookings_details.bookings_id')
        ->join('bookings_details_transactions', 'bookings_details_transactions.bookings_details_id', '=', 'bookings_details.id')
        ->join('events_stages', 'bookings_details.stage_id', '=', 'events_stages.id')
        ->join('events', 'bookings_details.events_id', '=', 'events.id')
        ->where([
                    ['bookings.clients_id', '=', $userId],
                    ['is_paid', '=', '1'],
                    ['cancelled', '=', '0'],
                ])
        ->orderBy('events_datetimes', 'asc')
        ->get();

        //Log::info('tours : '.print_r($tours, true));
        
        // $queries    = DB::getQueryLog();
        // $last_query = end($queries);

        // Log::info('last_query : '.print_r($last_query, true));


        $count = 0;
        $message = "";


        foreach ($tours as $tour) {

            /*
         
            Log::info('################# tour ###################');
            Log::info('tours : '.print_r($tour, true));

           // $tourAttribute = $tour->getAttributes();

            // $message = $tourAttribute;
            break;
            /*
            foreach($tourAttribute as $key => $value) {
            
                $valueOut = strlen($value) > 20 ? substr($value,0,20)."..." : $value;
                //  Log::info('tour property '.$key.' : '.$valueOut);
                
                $message = tourAttribute;

            }
           

            Log::info('##########################################');
             */
        

            $data['tours'][$count] = [  
                'tourEventId' => $tour->events_id,
                'tourDateTime' => $tour->datetime,
                'name' => $tour->name_short,
                'bookingId' => $tour->bookings_id,
                'bookingDetailsId' => $tour->bookings_details_id,
                'description' => $tour->description_short,
                'clients_id' => $tour->clients_id,
                'amount_local' => $tour->amount_local,
                'booking_time' => $tour->booking_time,
                'events_datetimes' => $tour->events_datetimes,
                'amount_converted' => $tour->amount_converted,
                'number_adults' => $tour->number_adults,
                'number_students' => $tour->number_students,
                'number_children' => $tour->number_children,
                'number_seniors' => $tour->number_seniors,
                'number_infants' => $tour->number_infants,
                'stage_id' => $tour->stage_id,
                'private_group' => $tour->private_group,
                'imported_promo' => $tour->imported_promo,
                'exchange_rate' => $tour->exchange_rate,
                'charged_usd_amount' => $tour->charged_usd_amount,
                'charged_converted_amount' => $tour->charged_converted_amount,
                'local_amount' => $tour->local_amount,
                'local_discount' => $tour->local_discount,
                'exchange_from' => $tour->exchange_from,
                'exchange_to' => $tour->exchange_to,
                'exchange_amount' => $tour->exchange_amount,
                'important_information' => $tour->important_information,
                'mp_text_g' => $tour->mp_text_g,
                'endpoint_g' => $tour->endpoint_g,
                'directions_g' => $tour->directions_g,
                'latitude' => $tour->latitude,
                'longitude' => $tour->longitude,
                'tourInfoLink' => $tour->url_name,
                'tourServiceLink' => $tour->url_name
                ];

            $count++;
        } // end or tours


        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => $data,
        'message' => $message
        ];

        // final return
        return response($response);
    }

    /**
     * Operation addUserTraveler
     *
     * Add to users traveler list.
     *
     * @param int $user_id ID of user to append traveler (required)
     *
     * @return Http response
     */
    public function addUserTraveler(Request $request, $userId)
    {
     Log::info('##################### addUserTraveler #####################');

        $data = array();

         if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 
        
        $validator = Validator::make($request->all(), [
            'fname' => 'required',
            'lname' => 'required',
            'email' => 'required|email',
        ]);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

        // does this client exist using this email
       // $client = App\Models\Client::where('email', $request->email)->first();

        $client  = Client::where('email', $request->email)->first();

        if (is_null($client)) {
            Log::info('client not found by email, creating : '.print_r($request->email, true));

            // create the client
            $client = new Client;
            
            if ($request->has('password')) {
                $client->password = app('hash')->make($request->password);
            };
        
            if ($request->has('fname')) { $client->fname = $request->fname; };
            if ($request->has('lname')) { $client->lname = $request->lname; };
            if ($request->has('email')) { $client->email = $request->email; };
            if ($request->has('address')) { $client->address = $request->address; };
            if ($request->has('city')) { $client->city = $request->city; };
            if ($request->has('zip')) { $client->zip = $request->zip; };
            if ($request->has('countries_id')) { $client->countries_id = $request->countries_id; };
            if ($request->has('home_number')) { $client->home_number = $request->home_number; };
            if ($request->has('mobile_number')) { $client->mobile_number = $request->mobile_number; };
            if ($request->has('title')) { $client->title = $request->title; };
            if ($request->has('account_status')) { $client->account_status = $request->account_status; };

            $client->save();

        } else {
            Log::info('client found by email : '.print_r($request->email, true));
        }

        // Create the ClientTraveler record
        $clientTraveler = new ClientTraveler;
        
        $clientTraveler->client_id = $userId;
        $clientTraveler->traveler_client_id = $client->id;
        
        $clientTraveler->save();

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'clientTraveler' => $clientTraveler ]
        ];

        // final return
        return response($response);
    }

    /**
     * Operation deleteUserTraveler
     *
     * Deletes a traveler.
     *
     * @param int $user_id User id to manipulate (required)
     *
     * @return Http response
     */
    public function deleteUserTraveler(Request $request, $userId)
    {
    Log::info('##################### deleteUserTraveler #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        $validator = Validator::make($request->all(), [
            'travelerClientId' => 'required'
        ]);

        if ($validator->fails()) {
            
            Log::info('validator fails: '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

        Log::info('would now delete clientTraveler by userId: '.print_r($userId, true));

        Log::info('and by travelerClientId: '.print_r($request->travelerClientId, true));

        $clientTraveler = \App\Models\ClientTraveler::where('traveler_client_id', $request->travelerClientId)->first();


         if (is_null($clientTraveler)) {
            Log::info('ClientTraveler not found by request->travelerClientId '.print_r($request->travelerClientId, true));

        $response = [
            'code' => 400,
            'status' => 'failure',
            'data' => 'ClientTraveler not found by travelerClientId'
            ];

        return response($response);

        }

        Log::info('Finally now delete the ClientTraveler id : '.print_r($clientTraveler->id, true));

        //Log::info('Finally now delete the ClientTraveler: '.print_r($clientTraveler, true));

        $clientTraveler->delete();

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => 'ClientTraveler deleted'
        ];

        // final return
        return response($response);
    }

    /**
     * Operation userTraveler
     *
     * Get user traveler list.
     *
     * @param int $user_id ID of user to fetch (required)
     *
     * @return Http response
     */
    public function userTraveler(Request $request, $userId)
    {
    Log::info('##################### userTraveler #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        }   

        // get the records
        $clientTravelers = \App\Models\ClientTraveler::where('client_id', $userId)
                ->join('clients', 'clients.id', '=', 'client_travelers.traveler_client_id')
                ->orderBy('traveler_client_id')
                ->get();

        $count = 0;
        foreach ($clientTravelers as $traveler) {

            $data['clientTravelers'][$count] = [  
                                        'traveler_client_id' => $traveler->traveler_client_id,
                                        'fname' => $traveler->fname,
                                        'lname' => $traveler->lname,
                                        'email' => $traveler->email,
                                        'phone' => $traveler->mobile_number
                                         ];

            $count++;
        }

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => $data 
        ];

        // final return
        return response($response);
        
    }

    /**
     * Operation uploadFile
     *
     * uploads an image.
     *
     * @param int $user_id ID of user to update (required)
     *
     * @return Http response
     */
    public function uploadFile(Request $request, $userId)
    {
    Log::info('##################### uploadFile #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        // 
        
        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => 'File added'
        ];

        // final return
        return response($response);
    }

    /**
     * Operation addUserWishlist
     *
     * Add to users Wishlist of events.
     *
     * @param int $user_id ID of user to append Wishlist (required)
     *
     * @return Http response
     */
    public function addUserWishlist(Request $request, $userId)
    {
    Log::info('##################### addUserWishlist #####################');

        $data = array();

         if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        // TODO:   scope this events_id - unique to client_id. 
        // https://laravel.com/docs/5.1/validation#rule-unique. 

        $validator = Validator::make($request->all(), [
            'events_id' => 'required|exists:events,id'
        ]);

        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        }

        // get the records say for clients_id 152880
        // https://laravel.com/docs/5.4/queries
        $tourCount = \App\Models\ClientWishList::where(
                [
                    ['client_id', '=', $userId],
                    ['events_id', '=', $request->events_id]
                ])->count();


        if ($tourCount > 0) {
            
            Log::info(' events_id : exists ');

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'submitedd events_id already exists in this users wishlist'
            ];

            return response($response);
        }


        // add the record
        $clientWishList = new ClientWishList;
        
        $clientWishList->client_id = $userId;
        if ($request->has('events_id')) { $clientWishList->events_id = $request->events_id; };

        $clientWishList->save();

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'clientsWishList' => $clientWishList ]
        ];

        // final return
        return response($response);
    }

    /**
     * Operation deleteWishlistItem
     *
     * Deletes a wishlist item.
     *
     * @param int $user_id User id to manipulate (required)
     *
     * @return Http response
     */
    public function deleteWishlistItem(Request $request, $userId)
    {
    Log::info('##################### deleteWishlistItem #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        $validator = Validator::make($request->all(), [
            'events_id' => 'required|exists:client_wish_lists,events_id'
        ]);

        if ($validator->fails()) {
            
            Log::info('validator fails: '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

        Log::info('would now delete ClientWishList by userId: '.print_r($userId, true));



        Log::info('and by events_id: '.print_r($request->events_id, true));

        $clientWishList = \App\Models\ClientWishList::where(
                [
                    ['client_id', '=', $userId],
                    ['events_id', '=', $request->events_id],
                ]
            )->first();


         if (is_null($clientWishList)) {
            Log::info('ClientWishList not found by request->events_id '.print_r($request->events_id, true));

        $response = [
            'code' => 400,
            'status' => 'failure',
            'data' => 'ClientWishList item not found by client_id, events_id'
            ];

        return response($response);

        }

        Log::info('Finally now delete the ClientWishList id : '.print_r($clientWishList->id, true));

        //Log::info('Finally now delete the ClientTraveler: '.print_r($clientTraveler, true));

        $clientWishList->delete();

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => 'ClientWishList item deleted'
        ];

        // final return
        return response($response);
    }

    /**
     * Operation userWishlist
     *
     * Get user wishlist of events.
     *
     * @param int $user_id ID of user to fetch (required)
     *
     * @return Http response
     */
    public function userWishlist(Request $request, $userId)
    {
    Log::info('##################### userWishlist #####################');

        $data = array();

        if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        // get the records say for clients_id 152880
        // https://laravel.com/docs/5.4/queries
        $tours = \App\Models\ClientWishList::where('client_id', $userId)
        ->join('events', 'client_wish_lists.events_id', '=', 'events.id')
        ->orderBy('created_at', 'asc')
        ->get();


        Log::info('tours : '.print_r($tours, true));

        $count = 0;
        foreach ($tours as $tour) {
            // echo $tour->name;
            // name_short

            $tourStatus = 

            $data['tours'][$count] = [  'tourEventId' => $tour->events_id,
                                        'name' => $tour->name_short,
                                        'description' => $tour->description_short,
                                        'price' => $tour->adults_price,
                                        'tourInfoLink' => $tour->url_name,
                                        'tourServiceLink' => $tour->url_name,
                                         ];

            $count++;
        }


        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => $data
        ];

        // final return
        return response($response);
    }


 /**
     * Operation userBookingVoucher
     *
     * Cancel a booking
     *
     * @param int $user_id ID of user  (required)
     *
     * @return Http response
     */
    public function userBookingVoucher(Request $request, $userId)
    {
    Log::info('##################### userBookingVoucher #####################');

        $data = array();

         if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        $validatorMessages =  [
            'bookingDetailsId.required' => 'A bookingDetailsId is required',
            'bookingDetailsId.exists' => 'A record was not found matching that bookingDetailsId'
        ];


        $validator = Validator::make($request->all(), [
            'bookingDetailsId' => 'required|exists:bookings_details,id'
        ], $validatorMessages);



        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

         $client = \App\Models\Client::find($userId);

        // let's see if it's your booking and if it alread cancelled.
         Log::info('bookingDetailsId : '.print_r($request->bookingDetailsId, true));


        $tour = DB::table('bookings')->select('bookings.*','events.*','bookings_details.*','bookings_details.id as bookings_details_id')
        ->join('bookings_details', 'bookings.id', '=', 'bookings_details.bookings_id')
        ->join('events', 'bookings_details.events_id', '=', 'events.id')
        ->where([
                    ['bookings.clients_id', '=', $userId],
                    ['bookings_details.id', '=', $request->bookingDetailsId]
                ])
        ->orderBy('events_datetimes', 'asc')
        ->first();


        Log::info('tour : '.print_r($tour, true));


        if (is_null($tour)) {
            Log::info('booking detail not found by clients_id and bookings_details.id ');

        $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $data,
            'message' => 'booking detail not found by clients_id and bookings_details.id'
            ];

        return response($response);

        }

         if ($tour->cancelled == 1) {
            Log::info('booking was previously cancelled');

        $response = [
            'code' => 200,
            'status' => 'success',
            'data' => [ 'userBookingVoucher' => 'previously cancelled' ]
        ];

        return response($response);

        }


        $data = array(
                "booking_detail_ids" => array($request->bookingDetailsId),
                "template_name" => 'take-walks-resend-booking-confirmation-email-english',
         //       "email_address_override"  =>  "david+userBookingVoucher@walks.org"
        );


        Log::info('data : '.print_r($data, true));


        $command = new WapiCommand('mailer', 'sendBookingConfirmation', $data );

        Log::info('command : '.print_r($command, true));

        $wapiResponse = WapiConnectController::apiRequest($command);
        

        if ($wapiResponse['wapiStatus']['code'] != 200) {

            return response($wapiResponse['wapiStatus']);

        } 
        

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'userBookingVoucher' => 'sent' ]
        ];

        // final return
        return response($response);
    }


 /**
     * Operation userBookingCancel
     *
     * Cancel a booking
     *
     * @param int $user_id ID of user  (required)
     *
     * @return Http response
     */
    public function userBookingCancel(Request $request, $userId)
    {
    Log::info('##################### userBookingCancel #####################');

        $data = array();

         if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        $validatorMessages =  [
            'bookingDetailsId.required' => 'A bookingDetailsId is required',
            'bookingDetailsId.exists' => 'A record was not found matching that bookingDetailsId'
        ];


        $validator = Validator::make($request->all(), [
            'bookingDetailsId' => 'required|exists:bookings_details,id',
            'message' => 'required'
        ], $validatorMessages);



        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

         $client = \App\Models\Client::find($userId);

        // let's see if it's your booking and if it alread cancelled.
         Log::info('bookingDetailsId : '.print_r($request->bookingDetailsId, true));


        $tour = DB::table('bookings')->select('bookings.*','events.*','bookings_details.*','bookings_details.id as bookings_details_id')
        ->join('bookings_details', 'bookings.id', '=', 'bookings_details.bookings_id')
        ->join('events', 'bookings_details.events_id', '=', 'events.id')
        ->where([
                    ['bookings.clients_id', '=', $userId],
                    ['bookings_details.id', '=', $request->bookingDetailsId]
                ])
        ->orderBy('events_datetimes', 'asc')
        ->first();


        Log::info('tour : '.print_r($tour, true));


        if (is_null($tour)) {
            Log::info('booking detail not found by clients_id and bookings_details.id ');

        $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $data,
            'message' => 'booking detail not found by clients_id and bookings_details.id'
            ];

        return response($response);

        }

         if ($tour->cancelled == 1) {
            Log::info('booking was previously cancelled');

        $response = [
            'code' => 200,
            'status' => 'success',
            'data' => [ 'userBookingCancel' => 'previously cancelled' ]
        ];

        return response($response);

        }


        $data = array(
                "client_name" => $client->fname." ".$client->lname,
                "event_name" => $tour->name_short,
                "event_datetime" => $tour->events_datetimes,
                "message" => $request->message,
                "booking_id" => $tour->id
        );


        Log::info('data : '.print_r($data, true));

        // __construct($command, $method = 'GET', $uri, $options, $retryOnError = false) {
        
        $command = new WapiCommand('mailer', 'sendBookingCancel', $data );

        Log::info('command : '.print_r($command, true));

        $wapiResponse = WapiConnectController::apiRequest($command);
        

        if ($wapiResponse['wapiStatus']['code'] != 200) {

            return response($wapiResponse['wapiStatus']);

        } 
        

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'userBookingCancel' => 'requested' ]
        ];

        // final return
        return response($response);
    }

/**
     * Operation userBookingRefund
     *
     * Refund a booking
     *
     * @param int $user_id ID of user (required)
     *
     * @return Http response
     */
    public function userBookingRefund(Request $request, $userId)
    {
    Log::info('##################### userBookingRefund #####################');

        $data = array();

         if (is_null($userId)) {

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => '',
            'message' => 'Missing userId on the path'
            ];

            return response($response);
        } 

        $validatorMessages =  [
            'bookingDetailsId.required' => 'A bookingDetailsId is required',
            'bookingDetailsId.exists' => 'A record was not found matching that bookingDetailsId'
        ];


        $validator = Validator::make($request->all(), [
            'bookingDetailsId' => 'required|exists:bookings_details,id',
            'message' => 'required'
        ], $validatorMessages);



        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

       
       $client = \App\Models\Client::find($userId);

        Log::info('bookingDetailsId : '.print_r($request->bookingDetailsId, true));


        $tour = DB::table('bookings')->select('bookings.*','events.*','bookings_details.*','bookings_details.id as bookings_details_id')
        ->join('bookings_details', 'bookings.id', '=', 'bookings_details.bookings_id')
        ->join('events', 'bookings_details.events_id', '=', 'events.id')
        ->where([
                    ['bookings.clients_id', '=', $userId],
                    ['bookings_details.id', '=', $request->bookingDetailsId]
                ])
        ->orderBy('events_datetimes', 'asc')
        ->first();


        Log::info('tour : '.print_r($tour, true));


        if (is_null($tour)) {
            Log::info('booking detail not found by clients_id and bookings_details.id ');

        $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $data,
            'message' => 'booking detail not found by clients_id and bookings_details.id'
            ];

        return response($response);

        }

         if ($tour->cancelled == 1) {
            Log::info('booking was previously cancelled');

        $response = [
            'code' => 200,
            'status' => 'success',
            'data' => [ 'userBookingRefund' => 'previously cancelled' ]
        ];

        return response($response);

        }

        // let's get the first events_stages_details tha matches this stage_id
        $coordinator_notes = '';

        $events_stages_details = DB::table('events_stages_details')->select('coordinator_notes')
        ->where([
                    ['events_stages_details.stage_id', '=', $tour->stage_id] 
                ])
        ->first();



        $queries    = DB::getQueryLog();
        $last_query = end($queries);

        Log::info('last_query : '.print_r($last_query, true));

         Log::info('events_stages_details : '.print_r($events_stages_details, true));

         if ($events_stages_details->coordinator_notes != '') {

            Log::info('YES events_stages_details');


            $coordinator_notes = $events_stages_details->coordinator_notes;

         } else {
            Log::info('NO events_stages_details');

             
             $coordinator_notes = 'No coordinator notes found';

        }


        $data = array(
                "client_name" => $client->fname." ".$client->lname,
                "event_name" => $tour->name_short,
                "event_datetime" => $tour->events_datetimes,
                "message" => $request->message,
                "coordinator_notes" => $coordinator_notes, 
                "booking_id" => $tour->id,
                "stage_id" => $tour->stage_id
        );


        Log::info('data : '.print_r($data, true));
        
        $command = new WapiCommand('mailer', 'sendBookingRefund', $data );

        Log::info('command : '.print_r($command, true));

        $wapiResponse = WapiConnectController::apiRequest($command);
        

        if ($wapiResponse['wapiStatus']['code'] != 200) {

            return response($wapiResponse['wapiStatus']);

        } 
        
        

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => [ 'userBookingCancel' => 'requested' ]
        ];

        // final return
        return response($response);
    }


    /**
     * Operation userSignup
     *
     * Send this users email to adestra
     *
     * @param int $user_id ID of user (required)
     *
     * @return Http response
     */
    public function userSignup(Request $request)
    {
    Log::info('##################### userSignup #####################');

    // you may find the result of a submit in:
    // https://app.adestra.com/Walks/workspace/2/data/list/6/dataviewer?cxt_data_list_browse_desc=1&cxt_data_list_browse_sort=cmi__id

        $data = array();
   

        $validatorMessages =  [
            'email.required' => 'An email is required',
            'listId.required' => 'A list id is required, try list 6',
        ];


        $validator = Validator::make($request->all(), [
            'email' => 'required|email',
            'listId' => 'required'
        ], $validatorMessages);



        if ($validator->fails()) {
            
            Log::info('request : '.print_r($validator->errors(), true));

            $response = [
            'code' => 405,
            'status' => 'failure',
            'data' => $validator->errors()
            ];

            return response($response);
        } 

    
        Log::info('listId : '.print_r($request->listId, true));

        // listId = 6 = Master list
        // listId = 7 = Test list
        
        // https://app.adestra.com/doc/page/current/index/api/contact#contact-create
        // output: The ID of the new/updated contact record

        $contact = AdestraContact::make(['email' => $request->email], false);

        // Log::info('contact make: '.print_r($contact->data, true));

        $contact->create();

        Log::info('contact create resulting data id: '.print_r($contact->data, true));

         if (!isset($contact->data['id'])) {



        // prepare final response
        $response = [
        'code' => 500,
        'status' => 'failure',
        'data' => $contact,
        'message' => 'Could not create contact',
        ];

        return response($response);

        }

        $phpXmlRpcResponse = $contact->subscribe($request->listId);
        
        // output:  1 if this call adds the contact to the list. 0 if it was already in the list.
        
        Log::info('contact subscribe result: '.print_r($contact, true));

        if ($phpXmlRpcResponse->errno == 0) {

        // prepare final response
        $response = [
        'code' => 200,
        'status' => 'success',
        'data' => $contact->data,
        'message' => 'contact created and subscribed to list',
        ];

    } else {

        $response = [
        'code' => 500,
        'status' => 'failure',
        'data' => $phpXmlRpcResponse,
        'message' => 'Could not subscribe to list',
        ];
    }
        // final return
        return response($response);
    }


}
